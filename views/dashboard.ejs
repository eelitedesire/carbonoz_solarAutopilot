<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Carbonoz SolarAutopilot</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
   <style>
    :root {
    --primary-color: #DEAF0B;
    --bg-color: #f5f6fa;
    --text-color: #2f3640;
    --icon-color: #636e72;
}

body, html {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
    height: 100%;
    background-color: var(--bg-color);
    
}

.container {
    display: flex;
    height: 100%;
}

.sidebar {
    width: 280px;
    background-color: white;
    box-shadow: 2px 0 5px rgba(0, 0, 0, 0.1);
    display: flex;
    flex-direction: column;
    transition: width 0.3s ease;
    z-index: 10;
}

.sidebar.collapsed {
    width: 80px;
}

.logo {
    display: flex;
    align-items: center;
    padding: 20px;
}

.logo-icon {
    width: 50px;
    height: 50px;
    background-color: var(--primary-color);
    border-radius: 8px;
    display: flex;
    justify-content: center;
    align-items: center;
    color: white;
    font-weight: bold;
    font-size: 20px;
}

.logo-text {
    margin-left: 10px;
    font-weight: bold;
    color: var(--text-color);
    font-size: 18px;
}

.logo-text .highlight {
    color: red;
}

.search {
    padding: 10px 20px;
}

.search input {
    width: 100%;
    padding: 10px;
    border: 1px solid #dcdde1;
    border-radius: 4px;
    font-size: 16px;
}

nav {
    flex-grow: 1;
}

nav ul {
    list-style-type: none;
    padding: 0;
    margin: 0;
}

nav li {
    padding: 15px 20px;
    display: flex;
    align-items: center;
    color: var(--text-color);
    cursor: pointer;
    transition: background-color 0.3s;
    font-size: 18px;
}
nav li a{
    text-decoration: none;
    color: #2f3640;
    font-weight: bold;
}
nav li:hover {
    background-color: var(--bg-color);
}

nav li i {
    margin-right: 15px;
    color: var(--icon-color);
    font-size: 24px;
}

.bottom-options {
    padding: 20px;
    border-top: 1px solid #dcdde1;
}

.toggle-sidebar {
    display: flex;
    align-items: center;
    justify-content: space-between;
    cursor: pointer;
    font-size: 16px;
}

.toggle-text {
    margin-right: 10px;
}

.toggle-switch {
    width: 50px;
    height: 25px;
    background-color: #dcdde1;
    border-radius: 12.5px;
    position: relative;
    transition: background-color 0.3s;
}

.toggle-switch::before {
    content: '';
    position: absolute;
    width: 21px;
    height: 21px;
    border-radius: 50%;
    background-color: white;
    top: 2px;
    left: 2px;
    transition: transform 0.3s;
}

.toggle-switch.active {
    background-color: var(--primary-color);
}

.toggle-switch.active::before {
    transform: translateX(25px);
}

.sidebar.collapsed .logo-text,
.sidebar.collapsed .search,
.sidebar.collapsed nav li span,
.sidebar.collapsed .toggle-text {
    display: none;
}

.sidebar.collapsed .logo {
    justify-content: center;
}

.sidebar.collapsed nav li {
    justify-content: center;
}

.sidebar.collapsed nav li i {
    margin-right: 0;
}

.main-container {
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    overflow: hidden;
}

header {
    background-color: white;
    padding: 20px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    position: sticky;
    top: 0;
    z-index: 5;
}

.main-content {
    flex-grow: 1;
    padding: 20px;
    overflow-y: auto;
}

.content-card {
    background-color: white;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    padding: 20px;
    min-height: 100%;
}

footer {
    background-color: var(--primary-color);
    color: white;
    text-align: center;
    padding: 10px;
}

@media (max-width: 768px) {
    .container {
        flex-direction: column;
    }

    .sidebar {
        width: 100%;
        height: auto;
    }

    .sidebar.collapsed {
        width: 100%;
    }

    .main-container {
        width: 100%;
    }
}

/* loading css */

.loading-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: #f8f9fa;
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 9999;
  }
  
  .loading-spinner {
    width: 50px;
    height: 50px;
    border: 5px solid #e0e0e0;
    border-top: 5px solid #3498db;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }
  
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

        .chart-container {
            background-color: #fff;
            border-radius: 10px;
            padding: 20px;
            border: 1px solid #e0e0e0;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05), 0 4px 8px rgba(0, 0, 0, 0.05);
    padding: 15px;
        }
        #energy-distribution {
            grid-column: 2;
            grid-row: 1 / span 2;
        }
        h2 {
            margin-top: 0;
        }
        .logo-text {
    color: #000000; /* Black color for 'Carbonoz' */
    font-weight: bold;
}

.logo-text .highlight {
    color: #DEAF0B; /* Yellow color for 'SolarAutopilot' */
}
   </style>
</head>
<body>
   
    <div class="container">
        <div id="loadingOverlay" class="loading-overlay">
            <div class="loading-spinner"></div>
          </div>
          <div id="pageContent"> </div>
        <div class="sidebar" id="sidebar">
            <div class="logo">
                <div class="logo-icon"><img src="https://carbonoz.com/assets/images/image04.jpg?v=8b5d1d9b" width="45px" alt=""></div>
                <span class="logo-text">Carbonoz <span class="highlight">SolarAutopilot</span></span>
            </div>
            <div class="search">
                <input type="text" placeholder="Search...">
            </div>
            <nav>
                <ul>
                    <li><a href="<%= ingress_path %>/"><i>üè†</i><span>Dashboard</span></a></li>
                    <li><a href="<%= ingress_path %>/dashboard"><i>‚ö°</i><span>Energy</span></a></li>
                    <li><a href="<%= ingress_path %>/chart"><i>üìä</i><span>Charts</span></a></li>
                    <li><a href="<%= ingress_path %>/messages"><i>üí¨</i><span>Messages</span></a></li>
                    <li><a href="<%= ingress_path %>/settings"><i>‚öôÔ∏è</i><span>Settings</span></a></li>
                    <li><a href="<%= ingress_path %>/analytics"><i>üìà</i><span>Analytics</span></a></li>
                </ul>
            </nav>
            <div class="bottom-options">
                <div class="toggle-sidebar" id="toggleSidebar">
                    <span class="toggle-text">Collapse sidebar</span>
                    <div class="toggle-switch" id="toggleSwitch"></div>
                </div>
            </div>
        </div>
       

        <div class="main-container">
            <header>
                <h1>Dashboard</h1>
            </header>

            <div class="main-content">
                <div class="content-card">
                    <section>
                        <div class="dashboard">
                          <div class="chart-container">
                              <h2>Energy Usage</h2>
                              <canvas id="energy-usage-chart"></canvas>
                          </div>
                          <div class="chart-container" id="energy-distribution">
                              <h2>Energy Distribution</h2>
                              <div id="energy-flow-diagram"></div>
                          </div>
                          <div class="chart-container">
                              <h2>Solar Production</h2>
                              <canvas id="solar-production-chart"></canvas>
                          </div>
                        </div>
                      </section>
                </div>
            </div>

            <footer>
                <p>&copy; 2024 Carbonoz SolarAutopilot. All rights reserved.</p>
            </footer>
        </div>
    </div>
    <script src="https://d3js.org/d3.v7.min.js"></script>
      <script>
    async function fetchTodayEnergyData() {
        try {
            const response = await fetch('<%= ingress_path %>/api/energy');
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return await response.json();
        } catch (error) {
            console.error('Error fetching data:', error);
            return null;
        }
    }

    function getLastTwentyFourHours() {
        const hours = [];
        const now = new Date();
        for (let i = 23; i >= 0; i--) {
            let d = new Date(now);
            d.setHours(d.getHours() - i);
            hours.push(d.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', hour12: true }));
        }
        return hours;
    }

    function updateEnergyDistributionDiagram(data) {
        d3.select("#energy-flow-diagram").html("");
        const width = 400;
        const height = 300;
        const svg = d3.select("#energy-flow-diagram")
            .append("svg")
            .attr("width", width)
            .attr("height", height);

        const nodes = [
            { id: "solar", label: "Solar", value: data.solarProduction, icon: "‚òÄÔ∏è" },
            { id: "grid", label: "Grid", value: data.gridIn - data.gridOut, icon: "üè≠" },
            { id: "battery", label: "Battery", value: data.batteryDischarged - data.batteryCharged, icon: "üîã" },
            { id: "home", label: "Home", value: data.totalConsumption, icon: "üè†" }
        ];

        const links = [
            { source: "solar", target: "home", value: Math.min(data.solarProduction, data.totalConsumption) },
            { source: "grid", target: "home", value: Math.max(0, data.gridIn - data.gridOut) },
            { source: "battery", target: "home", value: Math.max(0, data.batteryDischarged - data.batteryCharged) },
            { source: "solar", target: "battery", value: Math.max(0, data.solarProduction - data.totalConsumption) },
            { source: "solar", target: "grid", value: Math.max(0, data.solarProduction - data.totalConsumption - (data.batteryCharged - data.batteryDischarged)) }
        ];

        const nodeElements = svg.selectAll(".node")
            .data(nodes)
            .enter().append("g")
            .attr("class", "node")
            .attr("transform", (d, i) => `translate(${100 + (i % 2) * 200}, ${50 + Math.floor(i / 2) * 200})`);

        nodeElements.append("circle")
            .attr("r", 40)
            .attr("fill", "transparent")
            .attr("stroke", d => d.id === "solar" ? "#FFA500" : 
                                 d.id === "grid" ? "#4CAF50" : 
                                 d.id === "battery" ? "#2196F3" : "#FF5722")
            .attr("stroke-width", 3);

        nodeElements.append("text")
            .attr("text-anchor", "middle")
            .attr("dy", "-1em")
            .text(d => d.icon);

        nodeElements.append("text")
            .attr("text-anchor", "middle")
            .attr("dy", "2em")
            .text(d => `${d.label}: ${Math.abs(d.value).toFixed(1)} kWh`);

        const linkElements = svg.selectAll(".link")
            .data(links)
            .enter().append("path")
            .attr("class", "link")
            .attr("d", d => {
                const sourceNode = nodes.find(n => n.id === d.source);
                const targetNode = nodes.find(n => n.id === d.target);
                const sourceX = 100 + (nodes.indexOf(sourceNode) % 2) * 200;
                const sourceY = 50 + Math.floor(nodes.indexOf(sourceNode) / 2) * 200;
                const targetX = 100 + (nodes.indexOf(targetNode) % 2) * 200;
                const targetY = 50 + Math.floor(nodes.indexOf(targetNode) / 2) * 200;
                return `M${sourceX},${sourceY} L${targetX},${targetY}`;
            })
            .attr("stroke", d => d.source === "solar" ? "#FFA500" : 
                                  d.source === "grid" ? "#4CAF50" : 
                                  d.source === "battery" ? "#2196F3" : "#FF5722")
            .attr("stroke-width", d => Math.max(1, d.value / 5))
            .attr("fill", "none");

        svg.append("defs").selectAll("marker")
            .data(["end"])
            .enter().append("marker")
            .attr("id", String)
            .attr("viewBox", "0 -5 10 10")
            .attr("refX", 15)
            .attr("refY", -1.5)
            .attr("markerWidth", 6)
            .attr("markerHeight", 6)
            .attr("orient", "auto")
            .append("path")
            .attr("d", "M0,-5L10,0L0,5")
            .attr("fill", "#ffffff");

        linkElements.attr("marker-end", "url(#end)");
    }

    function updateEnergyUsageChart(data) {
        const ctx = document.getElementById('energy-usage-chart').getContext('2d');
        const hours = getLastTwentyFourHours();
        
        new Chart(ctx, {
            type: 'bar',
            data: {
                labels: hours,
                datasets: [
                    {
                        label: 'Solar',
                        data: data.hourlyData.map(d => d.solar),
                        backgroundColor: '#FFA500'
                    },
                    {
                        label: 'Grid',
                        data: data.hourlyData.map(d => d.grid),
                        backgroundColor: '#4CAF50'
                    },
                    {
                        label: 'Battery',
                        data: data.hourlyData.map(d => d.battery),
                        backgroundColor: '#2196F3'
                    },
                    {
                        label: 'Load',
                        data: data.hourlyData.map(d => d.load),
                        backgroundColor: '#FF5722'
                    }
                ]
            },
            options: {
                responsive: true,
                scales: {
                    x: { 
                        stacked: true,
                        ticks: {
                            maxRotation: 45,
                            minRotation: 45
                        }
                    },
                    y: { 
                        stacked: true,
                        title: { display: true, text: 'kWh' }
                    }
                },
                plugins: {
                    legend: { position: 'top' },
                    title: { display: true, text: 'Energy Usage (Last 24 Hours)' }
                }
            }
        });
    }

    function updateSolarProductionChart(data) {
        const ctx = document.getElementById('solar-production-chart').getContext('2d');
        const hours = getLastTwentyFourHours();

        new Chart(ctx, {
            type: 'bar',
            data: {
                labels: hours,
                datasets: [{
                    label: 'Solar Production',
                    data: data.hourlyData.map(d => d.solar),
                    backgroundColor: '#FFA500'
                }]
            },
            options: {
                responsive: true,
                scales: {
                    x: {
                        ticks: {
                            maxRotation: 45,
                            minRotation: 45
                        }
                    },
                    y: { 
                        beginAtZero: true,
                        title: { display: true, text: 'kWh' }
                    }
                },
                plugins: {
                    legend: { display: false },
                    title: { display: true, text: 'Solar Production (Last 24 Hours)' }
                }
            }
        });
    }

    async function updateDashboard() {
        const data = await fetchTodayEnergyData();
        if (data) {
            updateEnergyUsageChart(data);
            updateSolarProductionChart(data);
            updateEnergyDistributionDiagram(data);
        }
    }

    document.addEventListener('DOMContentLoaded', () => {
        updateDashboard();
        setInterval(updateDashboard, 300000); // Update every 5 minutes
    });
    </script>

  
</body>
</html>
