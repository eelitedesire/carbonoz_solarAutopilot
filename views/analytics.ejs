<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Carbonoz SolarAutopilot</title>
 
   <style>
    :root {
    --primary-color: #DEAF0B;
    --bg-color: #f5f6fa;
    --text-color: #2f3640;
    --icon-color: #636e72;
}

body, html {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
    height: 100%;
    background-color: var(--bg-color);
    
}

.container {
    display: flex;
    height: 100%;
}

.sidebar {
    width: 280px;
    background-color: white;
    box-shadow: 2px 0 5px rgba(0, 0, 0, 0.1);
    display: flex;
    flex-direction: column;
    transition: width 0.3s ease;
    z-index: 10;
}

.sidebar.collapsed {
    width: 80px;
}

.logo {
    display: flex;
    align-items: center;
    padding: 20px;
}

.logo-icon {
    width: 50px;
    height: 50px;
    background-color: var(--primary-color);
    border-radius: 8px;
    display: flex;
    justify-content: center;
    align-items: center;
    color: white;
    font-weight: bold;
    font-size: 20px;
}

.logo-text {
    margin-left: 10px;
    font-weight: bold;
    color: var(--text-color);
    font-size: 18px;
}

.logo-text .highlight {
    color: red;
}

.search {
    padding: 10px 20px;
}

.search input {
    width: 100%;
    padding: 10px;
    border: 1px solid #dcdde1;
    border-radius: 4px;
    font-size: 16px;
}

nav {
    flex-grow: 1;
}

nav ul {
    list-style-type: none;
    padding: 0;
    margin: 0;
}

nav li {
    padding: 15px 20px;
    display: flex;
    align-items: center;
    color: var(--text-color);
    cursor: pointer;
    transition: background-color 0.3s;
    font-size: 18px;
}
nav li a{
    text-decoration: none;
    color: #2f3640;
    font-weight: bold;
}
nav li:hover {
    background-color: var(--bg-color);
}

nav li i {
    margin-right: 15px;
    color: var(--icon-color);
    font-size: 24px;
}

.bottom-options {
    padding: 20px;
    border-top: 1px solid #dcdde1;
}

.toggle-sidebar {
    display: flex;
    align-items: center;
    justify-content: space-between;
    cursor: pointer;
    font-size: 16px;
}

.toggle-text {
    margin-right: 10px;
}

.toggle-switch {
    width: 50px;
    height: 25px;
    background-color: #dcdde1;
    border-radius: 12.5px;
    position: relative;
    transition: background-color 0.3s;
}

.toggle-switch::before {
    content: '';
    position: absolute;
    width: 21px;
    height: 21px;
    border-radius: 50%;
    background-color: white;
    top: 2px;
    left: 2px;
    transition: transform 0.3s;
}

.toggle-switch.active {
    background-color: var(--primary-color);
}

.toggle-switch.active::before {
    transform: translateX(25px);
}

.sidebar.collapsed .logo-text,
.sidebar.collapsed .search,
.sidebar.collapsed nav li span,
.sidebar.collapsed .toggle-text {
    display: none;
}

.sidebar.collapsed .logo {
    justify-content: center;
}

.sidebar.collapsed nav li {
    justify-content: center;
}

.sidebar.collapsed nav li i {
    margin-right: 0;
}

.main-container {
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    overflow: hidden;
}

header {
    background-color: white;
    padding: 20px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    position: sticky;
    top: 0;
    z-index: 5;
}

.main-content {
    flex-grow: 1;
    padding: 20px;
    overflow-y: auto;
}

.content-card {
    background-color: white;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    padding: 20px;
    min-height: 100%;
}

footer {
    background-color: var(--primary-color);
    color: white;
    text-align: center;
    padding: 10px;
}

@media (max-width: 768px) {
    .container {
        flex-direction: column;
    }

    .sidebar {
        width: 100%;
        height: auto;
    }

    .sidebar.collapsed {
        width: 100%;
    }

    .main-container {
        width: 100%;
    }
}

/* loading css */

.loading-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: #f8f9fa;
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 9999;
  }
  
  .loading-spinner {
    width: 50px;
    height: 50px;
    border: 5px solid #e0e0e0;
    border-top: 5px solid #3498db;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }
  
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }



 


  
  
      .card {
            background-color: var(--card-bg);
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            padding: 20px;
            margin-bottom: 20px;
        }

        .row {
            display: flex;
            flex-wrap: wrap;
            margin: -10px;
        }

        .col {
            flex: 1;
            padding: 10px;
            min-width: 250px;
        }

        .chart-container {
            background-color: var(--card-bg);
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            padding: 20px;
            margin-bottom: 20px;
        }

        table {
            width: 100%;
            border-collapse: collapse;
        }

        th, td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid var(--border-color);
        }

        .btn {
            display: inline-block;
            padding: 10px 20px;
            background-color: var(--primary-color);
            color: var(--text-color);
            text-decoration: none;
            border-radius: 4px;
            transition: background-color 0.3s;
        }
        .logo-text {
    color: #000000; /* Black color for 'Carbonoz' */
    font-weight: bold;
}

.logo-text .highlight {
    color: #DEAF0B; /* Yellow color for 'SolarAutopilot' */
}

   </style>
</head>
<body>
   
    <div class="container">
        <div id="loadingOverlay" class="loading-overlay">
            <div class="loading-spinner"></div>
          </div>
          <div id="pageContent"> </div>
        <div class="sidebar" id="sidebar">
            <div class="logo">
                <div class="logo-icon"><img src="https://carbonoz.com/assets/images/image04.jpg?v=8b5d1d9b" width="45px" alt=""></div>
                <span class="logo-text">Carbonoz <span class="highlight">SolarAutopilot</span></span>
            </div>
            <div class="search">
                <input type="text" placeholder="Search...">
            </div>
            <nav>
                <ul>
                    <li><a href="<%= ingress_path %>/"><i>üè†</i><span>Dashboard</span></a></li>
                    <li><a href="<%= ingress_path %>/dashboard"><i>‚ö°</i><span>Energy</span></a></li>
                    <li><a href="<%= ingress_path %>/chart"><i>üìä</i><span>Charts</span></a></li>
                    <li><a href="<%= ingress_path %>/messages"><i>üí¨</i><span>Messages</span></a></li>
                    <li><a href="<%= ingress_path %>/settings"><i>‚öôÔ∏è</i><span>Settings</span></a></li>
                    <li><a href="<%= ingress_path %>/analytics"><i>üìà</i><span>Analytics</span></a></li>
                </ul>
            </nav>
            <div class="bottom-options">
                <div class="toggle-sidebar" id="toggleSidebar">
                    <span class="toggle-text">Collapse sidebar</span>
                    <div class="toggle-switch" id="toggleSwitch"></div>
                </div>
            </div>
        </div>
       

        <div class="main-container">
            <header>
                <h1>Dashboard</h1>
            </header>

            <div class="main-content">
                <div class="content-card">
                    <div class="row">
                        <div class="col">
                            <div class="card">
                                <h4>Today</h4>
                                <p>
                                    <img src="https://www.svgrepo.com/download/293503/solar-panel.svg" alt="Solar Panel" width="50"/>
                                    <span>Solar PV: </span>
                                    <span id="daily-solar-pv-total">Calculating...</span>
                                </p>
                            </div>
                        </div>
                        <div class="col">
                            <div class="card">
                                <h4>Last 7 days</h4>
                                <p>
                                    <img src="https://www.svgrepo.com/download/293503/solar-panel.svg" alt="Solar Panel" width="50"/>
                                    <span>Solar PV: </span>
                                    <span id="weekly-solar-pv-total">Calculating...</span>
                                </p>
                            </div>
                        </div>
                        <div class="col">
                            <div class="card">
                                <h4>Last 30 days</h4>
                                <p>
                                    <img src="https://www.svgrepo.com/download/293503/solar-panel.svg" alt="Solar Panel" width="50"/>
                                    <span>Solar PV: </span>
                                    <span id="monthly-solar-pv-total">Calculating...</span>
                                </p>
                            </div>
                        </div>
                    </div>
    
                    <div class="chart-container">
                        <h3>Last 30 Days</h3>
                        <canvas id="last-30-days-chart"></canvas>
                    </div>
    
                    <div class="card">
                        <h3>Last 30 Days Data</h3>
                        <div class="table-container">
                            <table id="last30days-table">
                                <thead>
                                    <tr>
                                        <th>Date</th>
                                        <th>Solar PV</th>
                                        <th>Load</th>
                                        <th>Battery Charged</th>
                                        <th>Battery Discharged</th>
                                        <th>Grid Used</th>
                                        <th>Grid Exported</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <% for (let i = data.loadPowerData.length - 1; i >= 1 && i >= data.loadPowerData.length - 30; i--) { %>
                                        <tr>
                                            <!-- Display formatted date -->
                                            <td><%= new Date(data.loadPowerData[i].time).toLocaleDateString('en-GB', { timeZone: 'Indian/Mauritius' }) %></td>
                                            
                                            <% 
                                                let loadPowerDiff = 0, pvPowerDiff = 0, batteryStateOfChargeDiff = 0, batteryPowerDiff = 0, gridPowerDiff = 0, netPVPowerDiff = 0;
                                                
                                                // Ensure data exists and is valid before calculating differences
                                                if (data.loadPowerData[i-1] && data.loadPowerData[i] && data.loadPowerData[i-1].value !== null && data.loadPowerData[i].value !== null) {
                                                    loadPowerDiff = data.loadPowerData[i].value >= data.loadPowerData[i-1].value ? (data.loadPowerData[i].value - data.loadPowerData[i-1].value).toFixed(1) : data.loadPowerData[i].value.toFixed(1);
                                                }
                                                if (data.pvPowerData[i-1] && data.pvPowerData[i] && data.pvPowerData[i-1].value !== null && data.pvPowerData[i].value !== null) {
                                                    pvPowerDiff = data.pvPowerData[i].value >= data.pvPowerData[i-1].value ? (data.pvPowerData[i].value - data.pvPowerData[i-1].value).toFixed(1) : data.pvPowerData[i].value.toFixed(1);
                                                }
                                                if (data.batteryStateOfChargeData[i-1] && data.batteryStateOfChargeData[i] && data.batteryStateOfChargeData[i-1].value !== null && data.batteryStateOfChargeData[i].value !== null) {
                                                    batteryStateOfChargeDiff = data.batteryStateOfChargeData[i].value >= data.batteryStateOfChargeData[i-1].value ? (data.batteryStateOfChargeData[i].value - data.batteryStateOfChargeData[i-1].value).toFixed(1) : data.batteryStateOfChargeData[i].value.toFixed(1);
                                                }
                                                if (data.batteryPowerData[i-1] && data.batteryPowerData[i] && data.batteryPowerData[i-1].value !== null && data.batteryPowerData[i].value !== null) {
                                                    batteryPowerDiff = data.batteryPowerData[i].value >= data.batteryPowerData[i-1].value ? (data.batteryPowerData[i].value - data.batteryPowerData[i-1].value).toFixed(1) : data.batteryPowerData[i].value.toFixed(1);
                                                }
                                                if (data.gridPowerData[i-1] && data.gridPowerData[i] && data.gridPowerData[i-1].value !== null && data.gridPowerData[i].value !== null) {
                                                    gridPowerDiff = data.gridPowerData[i].value >= data.gridPowerData[i-1].value ? (data.gridPowerData[i].value - data.gridPowerData[i-1].value).toFixed(1) : data.gridPowerData[i].value.toFixed(1);
                                                }
                                                if (data.gridVoltageData[i-1] && data.gridVoltageData[i] && data.gridVoltageData[i-1].value !== null && data.gridVoltageData[i].value !== null) {
                                                    netPVPowerDiff = data.gridVoltageData[i].value >= data.gridVoltageData[i-1].value ? (data.gridVoltageData[i].value - data.gridVoltageData[i-1].value).toFixed(1) : data.gridVoltageData[i].value.toFixed(1);
                                                }
                                            %> 
                                            <td><%= pvPowerDiff %> kWh</td>
                                            <td><%= loadPowerDiff %> kWh</td>
                                            <td><%= batteryStateOfChargeDiff %> kWh</td>
                                            <td><%= batteryPowerDiff %> kWh</td>
                                            <td><%= gridPowerDiff %> kWh</td>
                                            <td><%= netPVPowerDiff %> kWh</td>
                                        </tr>
                                    <% } %>
                                </tbody>
                            </table>
                        </div>
                        <a href="#" id="last30days-table-download" class="btn">Download CSV</a>
                    </div>
    
                    <div class="chart-container">
                        <h3>Last 12 Months</h3>
                        <canvas id="last-12-months-chart"></canvas>
                    </div>
    
                    <div class="card">
                        <h3>Last 12 Months Data</h3>
                        <div class="table-container">
                            <table id="last12months-table">
                                <thead>
                                    <tr>
                                        <th>Month</th>
                                        <th>Solar PV</th>
                                        <th>Load</th>
                                        <th>Battery Charged</th>
                                        <th>Battery Discharged</th>
                                        <th>Grid Used</th>
                                        <th>Grid Exported</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <% 
                                    let monthlyData = {};
                                    let today = new Date();
                                    
                                    // Initialize the last 12 months
                                    for (let i = 0; i < 12; i++) {
                                        let date = new Date(today.getFullYear(), today.getMonth() - i, 1);
                                        let monthKey = date.toLocaleString('default', { month: 'long', year: 'numeric' });
                                        monthlyData[monthKey] = {
                                            load: 0, solar: 0, batteryCharged: 0, 
                                            batteryDischarged: 0, gridUsed: 0, gridExported: 0
                                        };
                                    }
                        
                                    // Sum up the data for each month using the same formula as in the 30-day table
                                    for (let i = data.loadPowerData.length - 1; i >= 1 && i >= data.loadPowerData.length - 30; i--) {
                                        let date = new Date(data.loadPowerData[i].time);
                                        let monthKey = date.toLocaleString('default', { month: 'long', year: 'numeric' });
                                        
                                        if (monthlyData[monthKey]) {
                                            let loadPowerDiff, pvPowerDiff, batteryStateOfChargeDiff, batteryPowerDiff, gridPowerDiff, netPVPowerDiff;
                                            
                                            if (data.loadPowerData[i-1].value === null || data.loadPowerData[i-1].value === 0) {
                                                loadPowerDiff = 0;
                                                pvPowerDiff = 0;
                                                batteryStateOfChargeDiff = 0;
                                                batteryPowerDiff = 0;
                                                gridPowerDiff = 0;
                                                netPVPowerDiff = 0;
                                            } else {
                                                loadPowerDiff = data.loadPowerData[i].value >= data.loadPowerData[i-1].value ? 
                                                    (data.loadPowerData[i].value - data.loadPowerData[i-1].value) : data.loadPowerData[i].value;
                                                pvPowerDiff = data.pvPowerData[i].value >= data.pvPowerData[i-1].value ? 
                                                    (data.pvPowerData[i].value - data.pvPowerData[i-1].value) : data.pvPowerData[i].value;
                                                batteryStateOfChargeDiff = data.batteryStateOfChargeData[i].value >= data.batteryStateOfChargeData[i-1].value ? 
                                                    (data.batteryStateOfChargeData[i].value - data.batteryStateOfChargeData[i-1].value) : data.batteryStateOfChargeData[i].value;
                                                batteryPowerDiff = data.batteryPowerData[i].value >= data.batteryPowerData[i-1].value ? 
                                                    (data.batteryPowerData[i].value - data.batteryPowerData[i-1].value) : data.batteryPowerData[i].value;
                                                gridPowerDiff = data.gridPowerData[i].value >= data.gridPowerData[i-1].value ? 
                                                    (data.gridPowerData[i].value - data.gridPowerData[i-1].value) : data.gridPowerData[i].value;
                                                netPVPowerDiff = data.gridVoltageData[i].value >= data.gridVoltageData[i-1].value ? 
                                                    (data.gridVoltageData[i].value - data.gridVoltageData[i-1].value) : data.gridVoltageData[i].value;
                                            }
                        
                                            monthlyData[monthKey].load += loadPowerDiff;
                                            monthlyData[monthKey].solar += pvPowerDiff;
                                            monthlyData[monthKey].batteryCharged += batteryStateOfChargeDiff;
                                            monthlyData[monthKey].batteryDischarged += batteryPowerDiff;
                                            monthlyData[monthKey].gridUsed += gridPowerDiff;
                                            monthlyData[monthKey].gridExported += netPVPowerDiff;
                                        }
                                    }
                        
                                    // Display the data for each month
                                    Object.keys(monthlyData).forEach(month => {
                                        let data = monthlyData[month];
                                    %>
                                        <tr>
                                            <td><%= month %></td>
                                             <td><%= data.solar.toFixed(1) %> kWh</td>
                                             <td><%= data.load.toFixed(1) %> kWh</td>
                                            <td><%= data.batteryCharged.toFixed(1) %> kWh</td>
                                            <td><%= data.batteryDischarged.toFixed(1) %> kWh</td>
                                            <td><%= data.gridUsed.toFixed(1) %> kWh</td>
                                            <td><%= data.gridExported.toFixed(1) %> kWh</td>
                                        </tr>
                                    <% }); %>
                                </tbody>
                            </table>
                        </div>
                        <a href="#" id="last12months-table-download" class="btn">Download CSV</a>
                    </div>
                </div>
            </div>

            <footer>
                <p>&copy; 2024 Carbonoz SolarAutopilot. All rights reserved.</p>
            </footer>
        </div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
    document.addEventListener('DOMContentLoaded', () => {
    // Function to get data from table
    function getTableData(tableId) {
        const rows = document.querySelectorAll(`#${tableId} tbody tr`);
        let labels = [];
        let solarData = [];
        let loadData = [];
        let gridUsedData = [];
        let gridExportedData = [];

        rows.forEach(row => {
            const cells = row.querySelectorAll('td');
            labels.push(cells[0].textContent.trim());
            solarData.push(parseFloat(cells[1].textContent));
            loadData.push(parseFloat(cells[2].textContent));
            gridUsedData.push(parseFloat(cells[5].textContent));
            gridExportedData.push(parseFloat(cells[6].textContent));
        });

        return { labels, solarData, loadData, gridUsedData, gridExportedData };
    }

    // Function to update chart
    function updateChart(chartElementId, labels, datasets) {
        const ctx = document.getElementById(chartElementId).getContext('2d');
        new Chart(ctx, {
            type: 'bar',
            data: {
                labels: labels,
                datasets: datasets
            },
            options: {
                responsive: true,
                scales: {
                    x: { stacked: true },
                    y: {
                        stacked: true,
                        title: { display: true, text: 'kWh' }
                    }
                },
                plugins: {
                    legend: { position: 'top' },
                    title: { display: true, text: chartElementId.replace(/-/g, ' ') }
                }
            }
        });
    }

    // Function to calculate Solar PV totals
    function calculateSolarPVTotals(data) {
        let dailyTotal = data.solarData[data.solarData.length - 1] || 0;
        let weeklyTotal = data.solarData.slice(-7).reduce((sum, value) => sum + value, 0);
        let monthlyTotal = data.solarData.reduce((sum, value) => sum + value, 0);

        return { dailyTotal, weeklyTotal, monthlyTotal };
    }

    // CSV generation function
    function generateCSV(tableId) {
        let csv = [];
        const rows = document.querySelectorAll(`#${tableId} tr`);

        rows.forEach(row => {
            let rowData = [];
            const cells = row.querySelectorAll('th, td');
            cells.forEach(cell => {
                rowData.push(cell.textContent.trim());
            });
            csv.push(rowData.join(','));
        });

        const blob = new Blob([csv.join('\n')], { type: 'text/csv;charset=utf-8;' });
        const url = URL.createObjectURL(blob);

        const downloadLink = document.getElementById(`${tableId}-download`);
        downloadLink.href = url;
        downloadLink.download = `${tableId}-${new Date().toISOString()}.csv`;
    }

    // Get data for last 30 days
    const last30DaysData = getTableData('last30days-table');

    // Update last 30 days chart
    updateChart('last-30-days-chart', last30DaysData.labels.reverse(), [
        { label: 'Solar PV', data: last30DaysData.solarData.reverse(), backgroundColor: '#FFA500' },
        { label: 'Load', data: last30DaysData.loadData.reverse(), backgroundColor: '#FF5722' },
        { label: 'Grid Used', data: last30DaysData.gridUsedData.reverse(), backgroundColor: '#9C27B0' },
        { label: 'Grid Exported', data: last30DaysData.gridExportedData.reverse(), backgroundColor: '#607D8B' }
    ]);

    // Get data for last 12 months
    const last12MonthsData = getTableData('last12months-table');

    // Update last 12 months chart
    updateChart('last-12-months-chart', last12MonthsData.labels.reverse(), [
        { label: 'Solar PV', data: last12MonthsData.solarData.reverse(), backgroundColor: '#FFA500' },
        { label: 'Load', data: last12MonthsData.loadData.reverse(), backgroundColor: '#FF5722' },
        { label: 'Grid Used', data: last12MonthsData.gridUsedData.reverse(), backgroundColor: '#9C27B0' },
        { label: 'Grid Exported', data: last12MonthsData.gridExportedData.reverse(), backgroundColor: '#607D8B' }
    ]);

    // Calculate and display Solar PV totals
    const solarPVTotals = calculateSolarPVTotals(last30DaysData);
    document.getElementById('daily-solar-pv-total').textContent = `${solarPVTotals.dailyTotal.toFixed(1)} kWh`;
    document.getElementById('weekly-solar-pv-total').textContent = `${solarPVTotals.weeklyTotal.toFixed(1)} kWh`;
    document.getElementById('monthly-solar-pv-total').textContent = `${solarPVTotals.monthlyTotal.toFixed(1)} kWh`;

    // Generate CSV for both tables
    generateCSV('last30days-table');
    generateCSV('last12months-table');

    // Sidebar toggle functionality
    const sidebar = document.getElementById('sidebar');
    const toggleSidebar = document.getElementById('toggleSidebar');
    const toggleSwitch = document.getElementById('toggleSwitch');

    toggleSidebar.addEventListener('click', () => {
        sidebar.classList.toggle('collapsed');
        toggleSwitch.classList.toggle('active');
    });

    // Hide loading overlay
    const loadingOverlay = document.getElementById('loadingOverlay');
    loadingOverlay.style.display = 'none';
});
</script>

</body>
</html>
